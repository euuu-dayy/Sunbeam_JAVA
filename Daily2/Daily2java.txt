######### DAY 2 ###########

# JAVA is Compiled and Interpreted -
	- Usually, a computer language is either compiled or Interpreted. Java combines both this
	  	approach and makes it a two-stage system.
	- Compiled: Java enables the creation of cross-platform programs by compiling them into an
		intermediate representation called Java Bytecode.
	- Interpreted: Bytecode is then interpreted, which generates machine code that can be directly
		executed by the machine/CPU.  


# JAVA is STRICTLY TYPED -

	- The type of every variable must be known at compile time.
	- You must declare the type of a variable when you define it.
	- The compiler checks type correctness before running the program.

# NAMING CONVENTIONS --


--------------------------------------------------------------------
REFER CLASSWORK FROM NOTEBOOK 
#0.demoo (wrapper classes) (Diagram) ( use of primitive as Objects) 

#1.demo1 (Boxing and unboxing) (Integer) (Converting primitive type to wrapper ( Boxing ) ) 

#2.demo02 (Boxing and unboxing) (Integer) (autoboxing and auto-unboxing) ( i,j,k) ( x,y,z) 

#3.demo03 (Integer to String and vice-versa) (Boxing and unboxing) 

#4.demo04 (boxing , unboxing , autoboxing , auto-unboxing ) (wrapper disadvantages addition example)
   
#5.demo05 (Switch ) (course) 

#6.demo06 (Switch) (do-while) 

(refer notes) (Human)
#7.demo07 ( class and object ) (message pass, Employee class (fields , methods , instance variable , instance method/Concrete) ,  //Concrete Instance method, this reference , anonymous instance) 

#7.demo08 ( class and object ) same as above using this (this refer notes)  

#change salary controlled access 

#7.demo07 ( class and object ) (Employee class getters and setters)

#initialization and assignment 

#8.demo08 (date class) (oop approach writing the class)	
//Step1: Understand requirement and Declare the class 
//Step2: Declare the fields 
//Step3: Creating the instance 
//Step4: access modifiers 
//Step5: calling methods

 

## characteristics of Object 

#9 demo09 (Calender class)  

#9.demo10 (date class) (constructor , paramterless , paramterized , message passing ,default values ) (Calender class)  

#10. demo11 (Person class ) (Constructors) (Constructor chaining) 