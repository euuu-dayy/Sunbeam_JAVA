+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Feature                          | Abstract Class                                      | Interface (Java 8+)                                  |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Keyword                          | abstract class                                      | interface                                            |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Instantiation                    | Cannot be instantiated directly                     | Cannot be instantiated                               |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Constructor                      | Yes — called by subclasses                          | No constructors                                      |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Methods                          | Can have abstract + concrete methods                | Can have abstract, default, and static methods       |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Fields (Variables)               | Any type: instance, static, final, etc.             | Only public static final (constants)                 |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Access Modifiers                 | Full support: private, protected, public            | All members are public by default                    |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Multiple Inheritance             | A class can extend only one abstract class          | A class can implement multiple interfaces            |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Inheritance Keyword              | extends                                             | implements                                           |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Adding New Methods               | Adding abstract method breaks subclasses            | Can add default methods without breaking code        |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Use Case                         | Code reuse, common behavior/state for related types | Contract / Capability for unrelated types            |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| “Is-A” vs “Can-Do”               | “Is-A” relationship (e.g., Dog is an Animal)        | “Can-Do” relationship (e.g., Bird can fly)           |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
| Main Purpose                     | Provide common base + partial implementation        | Define contract / API without implementation details |
+----------------------------------+-----------------------------------------------------+------------------------------------------------------+
